<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@2.41">
  <actions>
    <hudson.model.ParametersAction>
      <safeParameters class="sorted-set"/>
      <parameters>
        <hudson.model.StringParameterValue>
          <name>GITHUB_USER</name>
          <description>Backup repository : https://${GITHUB_USER}:${GITHUB_ACCESS_TOKEN}@github.com/${GITHUB_USER}/jenkins-backup.git
Branch where the backup will be uploaded : %Y%m%d</description>
          <value>bmastahac</value>
        </hudson.model.StringParameterValue>
        <hudson.model.StringParameterValue>
          <name>GITHUB_USER_EMAIL</name>
          <description></description>
          <value>mab@rms.ro</value>
        </hudson.model.StringParameterValue>
        <hudson.model.StringParameterValue>
          <name>GITHUB_ACCESS_TOKEN</name>
          <description></description>
          <value>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</value>
        </hudson.model.StringParameterValue>
      </parameters>
      <parameterDefinitionNames>
        <string>GITHUB_USER</string>
        <string>GITHUB_USER_EMAIL</string>
        <string>GITHUB_ACCESS_TOKEN</string>
      </parameterDefinitionNames>
    </hudson.model.ParametersAction>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>admin</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <jenkins.metrics.impl.TimeInQueueAction plugin="metrics@4.0.2.8">
      <queuingDurationMillis>5</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>0</buildableDurationMillis>
      <waitingDurationMillis>0</waitingDurationMillis>
    </jenkins.metrics.impl.TimeInQueueAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@2.19">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@2.92">
      <env class="tree-map"/>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
    <jenkins.metrics.impl.SubTaskTimeInQueueAction plugin="metrics@4.0.2.8">
      <queuingDurationMillis>11117</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>11113</buildableDurationMillis>
      <waitingDurationMillis>0</waitingDurationMillis>
      <executingDurationMillis>9245</executingDurationMillis>
      <workUnitCount>1</workUnitCount>
    </jenkins.metrics.impl.SubTaskTimeInQueueAction>
  </actions>
  <queueId>3</queueId>
  <timestamp>1644482991607</timestamp>
  <startTime>1644482991613</startTime>
  <result>SUCCESS</result>
  <duration>21503</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>//Jenkins env variable
//$POD_DOCKER_REPOSITORY
//$KUBECTL_JENKINS_AGENT
//$KUBECTL_JENKINS_AGENT_VERSION


def kubectl_image_source = &quot;$POD_DOCKER_REPOSITORY&quot;+&apos;/&apos;+&quot;$KUBECTL_JENKINS_AGENT&quot;+&apos;:&apos;+&quot;$KUBECTL_JENKINS_AGENT_VERSION&quot;

      podTemplate(
          containers: [
              containerTemplate(name: &apos;node&apos;, image: &apos;node:latest&apos;, ttyEnabled: true, command: &apos;cat&apos;)
              ],
              envVars: [
                        secretEnvVar(key: &apos;GITHUB_REPO_TOKEN&apos;, secretName: &apos;docker-config&apos;, secretKey: &apos;GITHUB_REPO_TOKEN&apos;),
                       ]
          ){

            podTemplate(serviceAccount: &apos;jdefaultmns&apos;,namespace: &apos;jenkins&apos;,containers: [
                  containerTemplate(name: &apos;kubectl&apos;, image: kubectl_image_source, command: &apos;cat&apos;, ttyEnabled: true)
                ],
                volumes: [
                  hostPathVolume(mountPath: &apos;/var/run/docker.sock&apos;, hostPath: &apos;/var/run/docker.sock&apos;)
                ]){

                      node(POD_LABEL){


                        try{
                            stage (&apos;Clean&apos;){
                                container (&apos;kubectl&apos;){
                                    sh &apos;kubectl delete pod jenkins-backup -n jenkins&apos;
                                }
                            }
                        }
                        catch (err){

                        }


                        stage (&apos;Repository cloning&apos;){
                            container(&apos;node&apos;){
                                    sh &apos;git clone https://${GITHUB_REPO_TOKEN}:x-oauth-basic@github.com/RomSoftIasi/governance-workspace.git&apos;
                                    sh &apos;cd governance-workspace/jenkins/docker/backup &amp;&amp; sed &quot;s,%GITHUB_USER%,${GITHUB_USER},g&quot; jenkins-backup.yaml.template | sed &quot;s,%GITHUB_USER_EMAIL%,${GITHUB_USER_EMAIL},g&quot; | sed &quot;s,%GITHUB_ACCESS_TOKEN%,${GITHUB_ACCESS_TOKEN},g&quot; &gt; jenkins-backup.yaml&apos;
                                    sh &apos;cat governance-workspace/jenkins/docker/backup/jenkins-backup.yaml&apos;
                            }
                        }

                        stage (&apos;Deploy jenkins backup container&apos;){
                            container(&apos;kubectl&apos;){
                                sh &apos;cd governance-workspace/jenkins/docker/backup &amp;&amp; kubectl apply -f . -n jenkins&apos;
                                //sh &apos;sleep 5m&apos;
                            }
                        }


                        stage (&apos;Backup finished. Clean up&apos;){
                            container(&apos;kubectl&apos;){
                               // sh &apos;cd governance-workspace/jenkins/docker/backup &amp;&amp; kubectl delete -f . -n jenkins&apos;
                            }
                        }

                      }
                }
          }
</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>235083317</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>286538527</long>
      </entry>
      <entry>
        <string>run</string>
        <long>4306261334</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>212849791</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>139392003</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>52</iota>
    <head>1:52</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>