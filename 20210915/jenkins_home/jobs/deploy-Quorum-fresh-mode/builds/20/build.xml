<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@2.41">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>admin</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <jenkins.metrics.impl.TimeInQueueAction plugin="metrics@4.0.2.8">
      <queuingDurationMillis>4</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>0</buildableDurationMillis>
      <waitingDurationMillis>0</waitingDurationMillis>
    </jenkins.metrics.impl.TimeInQueueAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@2.19">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@2.92">
      <env class="tree-map"/>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
    <hudson.tasks.Fingerprinter_-FingerprintAction>
      <record>
        <entry>
          <string>governance-workspace/jenkins/quorum-fresh-mode/stages/deployAnchoringSC/anchoringSCInfo.json</string>
          <string>171c806e3836ee067a8beb384d120ddc</string>
        </entry>
      </record>
    </hudson.tasks.Fingerprinter_-FingerprintAction>
    <jenkins.metrics.impl.SubTaskTimeInQueueAction plugin="metrics@4.0.2.8">
      <queuingDurationMillis>11352</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>11351</buildableDurationMillis>
      <waitingDurationMillis>0</waitingDurationMillis>
      <executingDurationMillis>153340</executingDurationMillis>
      <workUnitCount>1</workUnitCount>
    </jenkins.metrics.impl.SubTaskTimeInQueueAction>
  </actions>
  <queueId>752</queueId>
  <timestamp>1631696055934</timestamp>
  <startTime>1631696055939</startTime>
  <result>SUCCESS</result>
  <duration>165575</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>//Jenkins env variable
//$POD_DOCKER_REPOSITORY
//$KUBECTL_JENKINS_AGENT
//$KUBECTL_JENKINS_AGENT_VERSION




def kubectl_image_source = &quot;$POD_DOCKER_REPOSITORY&quot;+&apos;:&apos;+&quot;$KUBECTL_JENKINS_AGENT&quot;+&apos;_&apos;+&quot;$KUBECTL_JENKINS_AGENT_VERSION&quot;

podTemplate(serviceAccount: &apos;jdefaultmns&apos;,namespace: &apos;jenkins&apos;,containers: [
  containerTemplate(name: &apos;kubectl&apos;, image: kubectl_image_source, command: &apos;cat&apos;, ttyEnabled: true)
],
volumes: [
  hostPathVolume(mountPath: &apos;/var/run/docker.sock&apos;, hostPath: &apos;/var/run/docker.sock&apos;)
]){

    podTemplate(
          containers: [
              containerTemplate(name: &apos;node&apos;, image: &apos;node:latest&apos;, ttyEnabled: true, command: &apos;cat&apos;)
              ]
          ){

  node(POD_LABEL) {
    stage(&apos;Deploy blockchain network&apos;) {
        stage(&apos;Get governance repo&apos;){
            sh &apos;git clone https://github.com/PharmaLedger-IMI/governance-workspace.git&apos;
            sh &apos;git clone https://github.com/groundnuty/k8s-wait-for.git&apos;
        }

        container(&apos;node&apos;){
            stage(&apos;Configure blockchain&apos;){
                sh &apos;cd governance-workspace/jenkins/quorum-fresh-mode &amp;&amp; npm install&apos;
                sh &apos;cd governance-workspace/jenkins/quorum-fresh-mode &amp;&amp; node ./stages/AdmAcc/stage.js&apos;
            }
        }

        container(&apos;kubectl&apos;) {
            stage(&apos;Deploy blockchain configuration&apos;){
                sh &apos;cd governance-workspace/jenkins/quorum-fresh-mode &amp;&amp; kubectl apply -f ./k8s -n default&apos;
            }
            stage(&apos;Deploy blockchain nodes&apos;){
                sh &apos;cd governance-workspace/jenkins/quorum-fresh-mode &amp;&amp; kubectl apply -f ./k8s/deployments -n default&apos;
            }
            stage(&apos;Deploy blockchain node connection&apos;){
                sh &apos;cd governance-workspace/jenkins/quorum-fresh-mode &amp;&amp; kubectl apply -f ./jenkins -n jenkins&apos;
            }
            stage(&apos;Get deployment status&apos;){
                sh &apos;cd k8s-wait-for &amp;&amp; chmod 755 ./wait_for.sh &amp;&amp; ./wait_for.sh pod -lname=quorum-node1-deployment -n default&apos;
                sh &apos;cd k8s-wait-for &amp;&amp; ./wait_for.sh pod -lname=quorum-node2-deployment -n default&apos;
                sh &apos;cd k8s-wait-for &amp;&amp; ./wait_for.sh pod -lname=quorum-node3-deployment -n default&apos;
                sh &apos;sleep 30s&apos;
                sh &quot;kubectl get pods -n default&quot;
            }
        }

        container(&apos;node&apos;){
            stage(&apos;Create OrgAcc&apos;){
                sh &apos;cd governance-workspace/jenkins/quorum-fresh-mode &amp;&amp; node ./stages/OrgAcc/stage.js&apos;
            }

            stage(&apos;Deploy smart contract AnchoringSC&apos;){
                sh &apos;git clone https://github.com/PharmaLedger-IMI/ethadapter.git&apos;
                sh &apos;cp ethadapter/SmartContracts/contracts/anchoringSC.sol governance-workspace/jenkins/quorum-fresh-mode/anchoring-sc/anchoringSC.sol&apos;
                sh &apos;cd governance-workspace/jenkins/quorum-fresh-mode &amp;&amp; node ./stages/deployAnchoringSC/stage.js&apos;
            }

        }

        container(&apos;kubectl&apos;){
            stage(&apos;create EthAdapterConfig kubernetes secrets&apos;){
                sh &apos;cd governance-workspace/jenkins/quorum-fresh-mode &amp;&amp; chmod 755 ./scripts/createEthAdapterConfig.sh &amp;&amp; ./scripts/createEthAdapterConfig.sh&apos;
            }
        }

        stage (&apos;Prepare artefacts&apos;){
            archiveArtifacts artifacts: &apos;governance-workspace/jenkins/quorum-fresh-mode/stages/deployAnchoringSC/anchoringSCInfo.json&apos;, fingerprint: true
        }
    }
  }
}
}
</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>351055278</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>302772314</long>
      </entry>
      <entry>
        <string>run</string>
        <long>6510178068</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>209827838</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>215397405</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>93</iota>
    <head>1:93</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>